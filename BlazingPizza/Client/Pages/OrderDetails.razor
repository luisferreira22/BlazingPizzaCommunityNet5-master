@page "/myorders/{orderId:int}"
@inject HttpClient HttpClient
@using System.Threading

<div class="main">
     @if (InvalidOrder)
     {
      <h2>!No!</h2>
      <p>Los sentimos, esta orden no puede ser cargada</p>
     }
     else if (OrderWithStatus == null)
     {
        <text>Cargando....</text>
     }
     else
     {
        <div class="track-order">
            <div class="track-order-title">
                <h2>Pedido realizado
                    @OrderWithStatus.Order.CreatedTime.ToLongDateString();
                </h2>
                <p class="ml-auto mb-0">
                    Estatus: <strong>@OrderWithStatus.StatusText</strong>
                </p>
            </div>
            <div class="track-order-body">
                Mostrar más detalle..
            </div>
        </div>
     }

</div>

@code {
    [Parameter]
    public int OrderId { get; set; }
    OrderWithStatus OrderWithStatus;
    bool InvalidOrder;

    CancellationTokenSource PollingCanlationToken;
    private async void PollforUpdate() {
        PollingCanlationToken = new CancellationTokenSource();
        while (!PollingCanlationToken.IsCancellationRequested)
        {
            try
            {
                InvalidOrder = false;
                OrderWithStatus = await HttpClient.GetFromJsonAsync<OrderWithStatus>($"orders/{OrderId}");

            }
            catch (Exception ex) {
                InvalidOrder = true;
                PollingCanlationToken.Cancel();
                Console.Error.WriteLine(ex);
            }
            StateHasChanged();
            await Task.Delay(400);
        }

    }
    //componente del ciclo de vida de los parametros, este se ejecuta cada vez que un parametro cambie de valor
    protected override void OnParametersSet()
    {
        PollingCanlationToken?.Cancel();
        PollforUpdate();
    }

}
